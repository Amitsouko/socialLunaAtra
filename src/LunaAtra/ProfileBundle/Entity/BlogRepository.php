<?php

namespace LunaAtra\ProfileBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * BlogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlogRepository extends EntityRepository
{

   public function getPublicPosts($user, $offset = 0, $numb = 10)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT a FROM ProfileBundle:Blog a 
                            WHERE a.privacy LIKE :private 
                            AND a.draft = :false
                            AND a.user = :user
                            ORDER BY a.publishedDate DESC')
            ->setFirstResult($offset)
            ->setMaxResults($numb)
            ->setParameters(array(
                'private' => "%\_0\_%" ,
                'false' => false   ,
                'user' => $user 
            ))
            ->getResult();
    }

   public function getPaginationPage($user, $offset = 0, $numb = 10)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT a FROM ProfileBundle:Blog a 
                            WHERE a.user = :user
                            ORDER BY a.publishedDate DESC
                            ')
            ->setFirstResult($offset)
            ->setMaxResults($numb)
            ->setParameters(array(
                'user' => $user 
            ))
            ->getResult();
    }

    public function getPostPostNumber($user)
    {
        $query = $this->getEntityManager()
            ->createQuery('SELECT count(a.id), a.draft FROM ProfileBundle:Blog a 
                            WHERE a.user =  :user
                            GROUP BY a.draft')
            ->setParameters(array(
                'user' => $user 
            ))
            ->getResult();

                $array["draft"] = ( isset($query[0]["draft"] ) && $query[0]["draft"] == true ) ?  $query[0][1] : 0;
                $array["draft"] = ( isset($query[1]["draft"] ) &&  $query[1]["draft"] == true ) ?  $query[1][1] : $array["draft"];
                $array["publicated"] = ( isset($query[0]["draft"]) && $query[0]["draft"] == false ) ?  $query[0][1] : 0;
                $array["publicated"] = ( isset( $query[1]["draft"]) && $query[1]["draft"] == false ) ?  $query[1][1] : $array["publicated"] ;
                return $array; 
    }



   public function getPostByPrivacy($array, $owner, $offset = 0, $numb = 10)
    {
        $qb = $this->createQueryBuilder("a");
        $query = $qb
            ->where("a.user = :user")
            ->setParameter("user", $owner)
            ->andWhere("a.privacy LIKE :privacy")
            //grab public
            ->setParameter("privacy", "%\_0\_%" );

        $i = 0;

        $orModule = $qb->expr()->orx();
        

        foreach($array as $value)
        {
            $orModule->add($qb->expr()->like('a.privacy', ":privacy".$i));

            //$query->orWhere("a.privacy LIKE :privacy".$i)
            // replace _ for \_, because of SQL syntaxe
            $query->setParameter("privacy".$i, "%".str_replace("_", "\\_", $value)."%" );
            $i++;
        }
        $query->andWhere($orModule);
        $query->setFirstResult($offset)
              ->setMaxResults($numb);
        $query->orderBy("a.publishedDate", "DESC");

        return $query->getQuery()->getResult();
    }
}
